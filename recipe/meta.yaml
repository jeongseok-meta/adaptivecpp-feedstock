{% set name = "AdaptiveCpp" %}
{% set version = "24.10.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/AdaptiveCpp/AdaptiveCpp/archive/v{{ version }}.tar.gz
    sha256: 3bcd94eee41adea3ccc58390498ec9fd30e1548af5330a319be8ce3e034a6a0b
    patches:
      - patches/0001-Install-tool-binaries-to-the-same-folder-of-lib.patch  # [linux]
      - patches/0002-Fall-back-missing-functions.patch  # [linux]

build:
  number: 9
  run_exports:
    - {{ pin_subpackage('adaptivecpp', max_pin='x.x') }}
  ignore_run_exports:
    - libboost
    - llvm
    - llvm-openmp  # [not win]
  missing_dso_whitelist:
    # https://conda-forge.org/docs/maintainer/knowledge_base/#nvcudadll-cannot-be-found-on-windows
    - "*/nvcuda.dll"    # [win]
    - "*/libcuda.so.1"  # [linux]
  skip: true  # [cuda_compiler_version == "11.8"]
  skip: true  # [osx and x86_64]
  string: cpu_llvm{{ llvm_version }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_llvm{{ llvm_version }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]

requirements:
  build:
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
    - cmake
    - doxygen
    - make       # [linux]
    - ninja      # [not win]
    - pkgconfig  # [linux]
    {% if cuda_compiler_version != "None" %}
    - {{ compiler('cuda') }}
    - cuda-cudart-dev  # [build_platform != target_platform]
    {% endif %}
  host:
    - clangdev
    - hipcc        # [linux and x86_64]
    - libboost-devel
    - llvmdev {{ llvm_version }}
    - llvm-openmp {{ llvm_version }}
    - llvm-spirv   # [linux]
    - libopencl-devel
    - spirv-tools  # [linux]
    {% if cuda_compiler_version != "None" %}
    # cuda-compat is needed for libcuda.so.1
    - cuda-compat      # [linux]
    - cuda-cudart-dev
    - cuda-driver-dev  # [linux]
    - cuda-version {{ cuda_compiler_version }}
    {% endif %}
  run:
    - clangdev  # [osx]
    - hip-runtime-amd  # [linux and x86_64]
    - llvm {{ llvm_version }}
    - libllvm{{ llvm_version }}
    - llvm-openmp {{ llvm_version }}  # [osx]

test:
  commands:
    - test -f $PREFIX/include/AdaptiveCpp/sycl/sycl.hpp  # [not win]
    - test -f $PREFIX/lib/cmake/AdaptiveCpp/adaptivecpp-config.cmake  # [not win]
    - test -f $PREFIX/lib/libacpp-common${SHLIB_EXT}  # [not win]
    - test -f $PREFIX/lib/hipSYCL/librt-backend-omp${SHLIB_EXT}  # [not win]
    - test -f $PREFIX/lib/hipSYCL/librt-backend-ocl${SHLIB_EXT}  # [linux]
    - test -f $PREFIX/lib/hipSYCL/librt-backend-hip${SHLIB_EXT}  # [linux and x86_64]
    {% if cuda_compiler_version != "None" %}
    - test -f $PREFIX/lib/hipSYCL/librt-backend-cuda${SHLIB_EXT}  # [not win]
    {% endif %}
    - acpp-info  # [not win]
    - if not exist %PREFIX%\\Library\\include\\AdaptiveCpp\\SYCL\\sycl.hpp exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\cmake\\AdaptiveCpp\\adaptivecpp-config.cmake exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\acpp-common.lib exit 1  # [win]
    - if not exist %PREFIX%\\Library\\bin\\acpp-common.dll exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\hipSYCL\\rt-backend-omp.lib exit 1  # [win]
    - if not exist %PREFIX%\\Library\\bin\\hipSYCL\\rt-backend-omp.dll exit 1  # [win]
    {% if cuda_compiler_version != "None" %}
    - if not exist %PREFIX%\\Library\\lib\\hipSYCL\\rt-backend-cuda.lib exit 1  # [win]
    - if not exist %PREFIX%\\Library\\bin\\hipSYCL\\rt-backend-cuda.dll exit 1  # [win]
    {% endif %}
    - "acpp-info.exe"  # [win]
  requires:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - clangdev
    - cmake
    - ninja  # [unix]
  files:
    - tests/

about:
  home: https://adaptivecpp.github.io/
  summary: 'The independent, community-driven platform for heterogeneous programming in C++'
  description: |
    AdaptiveCpp is the independent, community-driven modern platform for
    C++-based heterogeneous programming models targeting CPUs and GPUs from all
    major vendors. AdaptiveCpp lets applications adapt themselves to all the
    hardware found in the system. This includes use cases where a single binary
    needs to be able to target all supported hardware, or utilize hardware from
    different vendors simultaneously.
  license: BSD-2-Clause
  license_file: LICENSE
  dev_url: https://github.com/AdaptiveCpp/AdaptiveCpp

extra:
  recipe-maintainers:
    - jeongseok-meta
